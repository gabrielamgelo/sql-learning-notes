Types of Subqueries in PostgreSQL
1. Basic Subquery

    Description: A subquery is a query nested inside another query. It can be used in various parts of the main query, such as the SELECT list, FROM clause, or WHERE clause.
    Keywords/Indicators: "nested query", "inner query", "query within a query".
    
    Syntax:

    SELECT column1, column2
    FROM table
    WHERE column3 = (SELECT column3 FROM another_table WHERE condition);

2. Common Table Expressions (CTE)

    Description: A CTE is a named temporary result set that can be referenced within a SELECT, INSERT, UPDATE, or DELETE statement. It makes complex queries easier to read and maintain.
    Keywords/Indicators: "with clause", "temporary result set", "improve readability".
    
    Syntax:

    WITH cte_name AS (
        SELECT column1, column2
        FROM table
        WHERE condition
    )
    SELECT *
    FROM cte_name
    WHERE another_condition;

3. Temporary Table

    Description: A temporary table stores intermediate results temporarily during the session. It is useful for breaking down complex operations into manageable steps.
    Keywords/Indicators: "intermediate results", "session-specific", "complex operations".
    
    Syntax:

    CREATE TEMPORARY TABLE temp_table AS
    SELECT column1, column2
    FROM table
    WHERE condition;

    SELECT *
    FROM temp_table
    WHERE another_condition;

4. Correlated Subquery

    Description: A correlated subquery is a subquery that references columns from the outer query. It is executed once for each row processed by the outer query.
    Keywords/Indicators: "reference outer query", "row-by-row", "nested with dependencies".
    
    Syntax:

    SELECT column1, column2
    FROM table1
    WHERE column3 > (SELECT AVG(column3)
                     FROM table2
                     WHERE table2.column4 = table1.column4);

5. EXISTS Subquery

    Description: The EXISTS subquery checks for the existence of rows in a subquery. It returns TRUE if the subquery returns one or more rows, and FALSE if it returns no rows.
    Keywords/Indicators: "check existence", "return true/false", "conditional presence".
    
    Syntax:

    SELECT column1, column2
    FROM table
    WHERE EXISTS (SELECT 1 FROM another_table WHERE condition);

6. IN Subquery

    Description: The IN subquery is used to filter rows based on a set of values returned by a subquery. It returns TRUE if the column value exists in the set.
    Keywords/Indicators: "match against set", "subset of results", "filter by values".
    
    Syntax:

    SELECT column1, column2
    FROM table
    WHERE column3 IN (SELECT column3 FROM another_table WHERE condition);

7. LATERAL Subquery

    Description: A LATERAL subquery is a special kind of subquery that can reference columns from the preceding tables in the FROM clause. It's useful when the subquery needs to reference previous table results.
    Keywords/Indicators: "access previous results", "dynamic subquery", "dependent subquery".
    
    Syntax:

    SELECT t1.column1, t2.column2
    FROM table1 t1
    CROSS JOIN LATERAL (
        SELECT column2
        FROM table2 t2
        WHERE t2.column3 = t1.column3
    ) AS subquery_alias;

Key Points for Identifying the Correct Subquery

    Basic Subquery: Use when a simple query within another query is sufficient.
    
    CTE (Common Table Expression): Use when you need to simplify complex queries or when you need to reference the same subquery multiple times in a query.
    
    Temporary Table: Use when you need to store intermediate results for complex operations that require multiple steps or when you need the results to persist across multiple queries within a session.
    
    Correlated Subquery: Use when the subquery needs to refer to columns from the outer query and must be evaluated for each row in the outer query.
    
    EXISTS Subquery: Use when you need to check if any rows exist that match a certain condition.
    
    IN Subquery: Use when you need to filter results based on a list of values returned by a subquery.
    
    LATERAL Subquery: Use when the subquery needs to access columns from tables that appear earlier in the FROM clause.
