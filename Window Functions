Window Functions in PostgreSQL

ROW_NUMBER()
        Description: Assigns a unique sequential integer to rows within a partition of a result set, starting at 1 for the first row.
        Keywords/Indicators: "row numbering", "sequence", "rank rows".
        
        Syntax:

    SELECT column1, column2,
           ROW_NUMBER() OVER (PARTITION BY partition_column ORDER BY order_column) AS row_num
    FROM table;

RANK()

    Description: Assigns a rank to each row within a partition of a result set, with gaps in ranking values for ties.
    Keywords/Indicators: "ranking", "rank with gaps", "ordered ranking".
    
    Syntax:

    SELECT column1, column2,
           RANK() OVER (PARTITION BY partition_column ORDER BY order_column) AS rank
    FROM table;

DENSE_RANK()

    Description: Assigns a rank to each row within a partition of a result set, without gaps in ranking values for ties.
    Keywords/Indicators: "dense ranking", "rank without gaps", "continuous ranking".
    
    Syntax:

    SELECT column1, column2,
           DENSE_RANK() OVER (PARTITION BY partition_column ORDER BY order_column) AS dense_rank
    FROM table;

NTILE()

    Description: Divides the result set into a specified number of roughly equal parts and assigns a bucket number to each row.
    Keywords/Indicators: "bucket distribution", "percentile division", "quantiles".
    
    Syntax:

    SELECT column1, column2,
           NTILE(number_of_buckets) OVER (PARTITION BY partition_column ORDER BY order_column) AS bucket
    FROM table;

SUM()

    Description: Calculates the sum of a specified column's values over a specified window frame.
    Keywords/Indicators: "running total", "cumulative sum", "windowed aggregation".
    
    Syntax:

    SELECT column1, column2,
           SUM(column_to_sum) OVER (PARTITION BY partition_column ORDER BY order_column ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total
    FROM table;

AVG()

    Description: Calculates the average of a specified column's values over a specified window frame.
    Keywords/Indicators: "moving average", "average over window", "windowed average".
    
    Syntax:

    SELECT column1, column2,
           AVG(column_to_avg) OVER (PARTITION BY partition_column ORDER BY order_column ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS moving_avg
    FROM table;

MIN()

    Description: Finds the minimum value of a specified column's values over a specified window frame.
    Keywords/Indicators: "minimum value", "windowed min", "rolling minimum".
    
    Syntax:

    SELECT column1, column2,
           MIN(column_to_min) OVER (PARTITION BY partition_column ORDER BY order_column ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS min_value
    FROM table;

MAX()

    Description: Finds the maximum value of a specified column's values over a specified window frame.
    Keywords/Indicators: "maximum value", "windowed max", "rolling maximum".
    
    Syntax:

    SELECT column1, column2,
           MAX(column_to_max) OVER (PARTITION BY partition_column ORDER BY order_column ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS max_value
    FROM table;

LEAD()

    Description: Accesses data from the next row in the result set, useful for comparing values between consecutive rows.
    Keywords/Indicators: "next row value", "future row comparison", "look ahead".
    
    Syntax:

    SELECT column1, column2,
           LEAD(column_to_access, offset) OVER (PARTITION BY partition_column ORDER BY order_column) AS next_value
    FROM table;

LAG()

    Description: Accesses data from the previous row in the result set, useful for comparing values between the current and previous rows.
    Keywords/Indicators: "previous row value", "past row comparison", "look back".
    
    Syntax:

    SELECT column1, column2,
           LAG(column_to_access, offset) OVER (PARTITION BY partition_column ORDER BY order_column) AS previous_value
    FROM table;

FIRST_VALUE()

    Description: Returns the first value in the result set within the specified window frame.
    Keywords/Indicators: "first value", "initial value in window", "first row value".
    
    Syntax:

    SELECT column1, column2,
           FIRST_VALUE(column_to_access) OVER (PARTITION BY partition_column ORDER BY order_column) AS first_value
    FROM table;

LAST_VALUE()

    Description: Returns the last value in the result set within the specified window frame.
    Keywords/Indicators: "last value", "final value in window", "last row value".
    
    Syntax:

        SELECT column1, column2,
               LAST_VALUE(column_to_access) OVER (PARTITION BY partition_column ORDER BY order_column ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS last_value
        FROM table;

Key Points for Identifying the Correct Window Function

    ROW_NUMBER(): Use when you need a unique sequential number for each row, often for pagination or ranking without ties.
    RANK(): Use when you need to rank rows with gaps for ties, such as in competition results or leaderboard scenarios.
    DENSE_RANK(): Use when you need to rank rows without gaps, providing continuous ranks even if there are ties.
    NTILE(): Use when you need to distribute rows into a specified number of buckets or quantiles, such as for percentile calculations.
    SUM(): Use for cumulative or running totals over a specified window, such as sales totals over time.
    AVG(): Use for moving or running averages, smoothing out data trends.
    MIN(): Use to find the minimum value within a window, useful for rolling minimum values.
    MAX(): Use to find the maximum value within a window, useful for rolling maximum values.
    LEAD(): Use to access future row values, comparing current row data with subsequent rows.
    LAG(): Use to access past row values, comparing current row data with previous rows.
    FIRST_VALUE(): Use to retrieve the first value in a window frame, useful for getting the starting value of a group.
    LAST_VALUE(): Use to retrieve the last value in a window frame, useful for getting the ending value of a group.
